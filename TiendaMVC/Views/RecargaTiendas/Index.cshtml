@model IEnumerable<TiendaMVC.Models.RecargaTienda>
@using TiendaMVC.Models;
@using TiendaMVC.Class;

@{
    Layout = null;
    var listaRecargas = (List<RecargaTienda>)Session["ListaRecargasMoviles"];
}

<div class="table table-responsive no-border">
    <div style="font-size:15px;max-width:500px">
        <div class="btn bg-blue btn-sm" onclick="PedirRemitente('recargar');">Enviar Recargas</div>
        <div style="float:right" class="btn bg-orange btn-sm" onclick="PedirRemitente('reservar');">Añadir a Reservadas</div>
        @*<div class="btn bg-blue btn-sm" onclick="MostarCargando();"> @Html.ActionLink("Recargar Lista", "Recargar", "", new { Style = "color:white" }) </div>*@
    </div>

    <br />
    <table id="tblGridRM" class="table">
        @*<tr>
                <td>
                    <div class="form-group" style="float:right">
                            <div class="btn bg-blue btn-sm" onclick="MostarCargando();"> @Html.ActionLink("Recargar Lista", "Recargar", "", new { Style = "color:white" }) </div>
                        </div>
                </td>
            </tr>*@
        <tr style="background-color: #4d94ff !important;">

            <th>
                @Html.DisplayNameFor(model => model.Numero)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Nombre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Monto)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Costo)
            </th>
            <th>
                Fecha
            </th>
            <th></th>
        </tr>

        @foreach (var item in listaRecargas)
        {
            <tr id="tr_@item.id" style="background-color:@item.ColorError">
                @if (item.Error != null)
                {
                    if (item.Error.Length > 0)
                    {
                        <td>
                            @Html.DisplayFor(modelItem => item.Error)
                        </td>
                    }
                }
                <td>
                    +@Html.DisplayFor(modelItem => item.CodigoPais)@Html.DisplayFor(modelItem => item.Numero)
                </td>
                <td>
                    @item.Nombre
                </td>
                <td>
                    @item.Monto.To_0_00()
                </td>
                <td>
                    @item.Costo.To_0_00()
                </td>
                <td>
                    @item.Fecha
                </td>
                <td>
                    <input class="btn btn-danger btn-xs" type="submit" id="btnCreate" onclick="Eliminar(this,@item.id, event);" value="Eliminar" />
                    @*<div class="btn btn-success btn-xs"> @Html.ActionLink("Editar", "Edit", new { id = item.id }, new { Style = "color:white" }) </div>*@

                </td>
            </tr>
        }

    </table>
</div>

<script type="text/javascript">

    function ValidarVecesSemana() {
        
        $.ajax({
            url: "/RecargaTiendas/ValidarVecesSemanal/",
            data:
            {
                "CodigoPais": $("#CodigoPais").val(),
                "Numero": $("#Numero").val(),
                "Monto": $("#Monto").val(),
                "Nombre": $("#Nombre").val(),
                "remitente": $("#NumeroRemitente").val(),
            },
            type: "POST"
        })
            .done(function (data) {

                if (data.duplicado) {

                    swal({
                        title: data.msg,
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        cancelButtonText: "Cancelar",
                        confirmButtonText: 'Continuar'
                    }).then((result) => {
                        if (result.value) {
                            CrearGrid();
                        }
                    })
                } else {
                    CrearGrid();
                }
                          
                          
            });

    }

    function CrearGrid() {

        if ($("#Numero").val() == '' || $("#CodigoPais").val() == '' || $("#Monto").val() == '' ) {
            swal({
                title: "Alerta",
                allowOutsideClick: false,
                allowEscapeKey: false,
                type: 'info',
                title: "Complete los datos de la recarga",
            });
            return;
        }

        $.ajax({
            url: "/RecargaTiendas/Agregar/",
            data:
            {
                "CodigoPais": $("#CodigoPais").val(),
                "Numero": $("#Numero").val(),
                "Monto": $("#Monto").val(),
                "Nombre": $("#Nombre").val(),
                "remitente": $("#NumeroRemitente").val(),
            },
            type: "POST"
        })
            .done(function (data) {

                if (data.faul) {

                    swal({
                        title: "Alerta",
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        type: 'info',
                        title: data.faultstring,
                    });
                }

                else {

                    swal({
                        type: 'success',
                        title: 'Datos agregados correctamente',
                        toast: true,
                        position: 'top',
                        showConfirmButton: false,
                        timer: 3000
                    });

                    $("#Numero").val("");
                    $("#Nombre").val("");

                    $("#tblGridRM").append("<tr id='tr_" + data.recarga.id + "'>" +
                        "<td> + " + data.recarga.CodigoPais + data.recarga.Numero + "</td >" +
                        "<td>" + data.recarga.Nombre + "</td >" +
                        "<td>" + data.recarga.Monto.toFixed(2) + "</td >" +
                        "<td>" + data.recarga.Costo.toFixed(2) + "</td >" +
                        "<td><input class='btn btn-danger btn-xs' type='submit' id='btnCreate' onclick='Eliminar(this," + data.recarga.id + ", event);' value='Eliminar' /> " +

                        "</tr>");
                }

            })
            .error(function (data) {
                swal({
                    type: 'error',
                    title: 'No se pudo conectar con el servidor!',
                    showConfirmButton: false,

                });

            });
    }

    function Eliminar(obj, id, event) {
        event.preventDefault();

        swal({
            title: "Está seguro de eliminar la recarga?",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            allowOutsideClick: false,
            allowEscapeKey: false,
            cancelButtonColor: '#d33',
            cancelButtonText: "Cancelar",
            confirmButtonText: 'Eliminar'
        }).then((result) => {
            if (result.value) {
                $.ajax({
                    url: "/RecargaTiendas/Delete/",
                    data:
                    {
                        "id": id
                    },
                    type: "POST"
                })
                    .done(function (data) {
                        if (data == "error") {
                            swal("Error", "No se pudo conectar con el servidor!", "error");
                        }
                        else {
                            sweetAlert
                                ({
                                    title: "Ok",
                                    text: "Acción completada con exito!",
                                    type: "success"
                                }).then((result) => {
                                    if (result.value) {
                                        $("#tr_" + id).remove();

                                    }
                                })
                        }
                    })
                    .error(function (data) {
                        swal("Error", "No se pudo conectar con el servidor!", "error");
                    });
            }
        })
    }


    function PedirRemitente(accion) {

        var nFilas = $("#tblGridRM tr").length;
        if (nFilas < 2) {
            swal({
                title: "No hay recargas, Por favor agrege sus recargas a la lista.",
                type: 'warning',
                showCancelButton: false,
                allowOutsideClick: false,
                allowEscapeKey: false,
                confirmButtonColor: '#3085d6',
                confirmButtonText: 'Ok'
            })
            return;
        }


        var remitente = "";

         @{
             var EnabledSms = false;
             if ((TipoTienda)Session["TipoTienda"] == TipoTienda.Padre)
             {
                 EnabledSms = ((customer_info)Session["CurrentCustomer"]).EnabledSmsDestinatario;
             }
             else
             {
                 EnabledSms = ((customer_info)Session["CurrentAccont"]).EnabledSmsDestinatario;
             }
             if (EnabledSms)
              {
                @:  swal({
                @:  title: 'Ingrese el número del remitente (Código país + número, Ejm: (EEUU,17864445555)).',
                @: type: 'warning',
                @:input: 'number',
                @:inputAttributes:
                @:  {
                @:  autocapitalize: 'off'
                @: },
                @: showCancelButton: false,
                @: allowOutsideClick: false,
                @: allowEscapeKey: false,
                @: confirmButtonText: 'Siguiente &rarr;',
                @: confirmButtonColor: '#3085d6',
                @:}).then((result) => {
                @: remitente = result.value;
                @: RecargarLista(remitente,accion);
                @: })
                @:
                @: return;
              }
             else
             {
                 @:RecargarLista('',accion);
             }
          }

    }

    function RecargarLista(remitente,accion) {

        swal({
        title: 'Por favor espere un momento.',
            imageUrl: '../../Images/Cargando/cargandoHrizontal2.gif',
            imageAlt: 'Custom image',
            imageWidth: 200,
            imageHeight: 100,
            showConfirmButton: false,
            allowOutsideClick : false,
            allowEscapeKey : false,
            animation: true
        })

        $.ajax({
            url: "/RecargaTiendas/RecargarLista/",
            data:
            {
                "remitente": remitente,
                "accion": accion,
            },
            type: "POST"
        })
            .done(function (data) {

                if (data == "Error") {
                    swal({
                        title: "No se pude establecer conexión con el servidor.",
                        type: 'error',
                        showCancelButton: false,
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        confirmButtonColor: '#3085d6',
                        confirmButtonText: 'Ok'
                    })
                } else if (data == "ok") {
                    swal({
                        title: "El sistema ha completado la acción.",
                        type: 'success',
                        showCancelButton: false,
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        confirmButtonColor: '#3085d6',
                        confirmButtonText: 'Ok'
                    }).then((result) => {
                            window.location = "@Url.Action("Create","RecargaTiendas")";
                        })
                } else
                    if (data == "ListaVacia") {

                        swal({
                            title: "No hay recargas, Por favor agrege sus recargas a la lista.",
                            type: 'warning',
                            showCancelButton: false,
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'Ok'
                        })
                    }
                    else {

                        swal({
                            title: "Algunas recargas no fueron enviadas con éxito y quedaron en su lista.",
                            type: 'error',
                            showCancelButton: false,
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'Ok'
                        }).then((result) => {

                            window.location = "@Url.Action("Create","RecargaTiendas")";
                        })

                    }

            })
            .error(function (data) {
                swal({
                    title: "No se pude establecer conexión con el servidor.",
                    type: 'error',
                    showCancelButton: false,
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'Ok'
                })
            });

    }


</script>
